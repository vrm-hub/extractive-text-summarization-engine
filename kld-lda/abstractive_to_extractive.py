from nltk.tokenize import sent_tokenize, word_tokenize

def convert_abstractive_to_extractive(abstractive_summary, story_text):
    """
    Convert an abstractive summary into an extractive format by selecting sentences from the original story.

    Args:
    - abstractive_summary (str): The abstractive summary to be converted.
    - story_text (str): The original story text.

    Returns:
    - str: The extractive summary generated by selecting sentences from the original story.

    """
    abstractive_sentences = sent_tokenize(abstractive_summary)
    story_sentences = sent_tokenize(story_text)

    extractive_summary = []
    for abs_sentence in abstractive_sentences:
        best_match = max(story_sentences,
                         key=lambda sentence: len(set(word_tokenize(abs_sentence)) & set(word_tokenize(sentence))),
                         default='')
        extractive_summary.append(best_match)

    return ' '.join(extractive_summary)
